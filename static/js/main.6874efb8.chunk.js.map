{"version":3,"sources":["componentes/Posts.js","componentes/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","className","map","post","id","eventBody","symbol","labels","timestamp","status","checked","onClick","name","alert","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","href","App","useState","setPosts","setLoading","currentPage","setCurrentPage","vistos","noVistos","useEffect","a","axios","get","then","res","data","events","length","registro","console","log","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPost","slice","pageNumber","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAiCeA,G,MA5BD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MACf,GADoC,EAAdC,QAEpB,OAAO,6CAOT,OAAO,uBAAOC,UAAU,QAAjB,SACL,gCACCF,EAAMG,KAAI,SAAAC,GAAI,OACb,+BACE,6BAAKA,EAAKC,KACV,6BAAKD,EAAKE,UAAUC,SACpB,6BAAKH,EAAKI,SACV,6BAAKJ,EAAKK,YACV,6BAAKL,EAAKM,SACV,6BAAKN,EAAKO,UACV,6BAAI,wBAAQC,QAAS,kBAdLC,EAcwBT,EAAKE,UAAUC,YAb3DO,MAAM,uEAAoED,EAAO,KADnF,IAAsBA,GAcZ,SACe,YAAhBT,EAAKO,QAAwB,WAAa,cARtCP,EAAKC,aCMLU,EArBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEZC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACxDD,EAAYI,KAAKH,GAEnB,OACE,8BACE,oBAAIlB,UAAU,aAAd,SACGiB,EAAYhB,KAAI,SAAAqB,GAAM,OACrB,oBAAiBtB,UAAU,YAA3B,SACE,mBAAGU,QAAS,kBAAMM,EAASM,IAASC,KAAK,qBAAqBvB,UAAU,YAAxE,SACGsB,KAFIA,W,iBCyEJE,G,MArDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACT3B,EADS,KACF4B,EADE,OAEcD,oBAAS,GAFvB,mBAET1B,EAFS,KAEA4B,EAFA,OAGsBF,mBAAS,GAH/B,mBAGTG,EAHS,KAGIC,EAHJ,OAIOJ,mBAAS,IAAzBX,EAJS,oBAKZgB,EAAS,EACTC,EAAW,EAGfC,qBAAU,YACQ,uCAAG,gCAAAC,EAAA,6DACjBN,GAAW,GADM,SAMDO,IAAMC,IAAI,eAAeC,OANxB,OAOjB,IADIC,EANa,OAOTnB,EAAI,EAAGA,EAAImB,EAAIC,KAAKC,OAAOC,OAAQtB,IACrCuB,EAAWJ,EAAIC,KAAKC,OAAOrB,GAC/BwB,QAAQC,IAAIF,EAAShC,SACG,SAApBgC,EAAShC,QACXqB,IAEAC,IAGJW,QAAQC,IAAI,SAAWb,GACvBY,QAAQC,IAAI,WAAaZ,GACzBL,EAASW,EAAIC,KAAKC,QAClBZ,GAAW,GAnBM,2CAAH,qDAsBhBiB,KACC,IAGH,IAAMC,EAAkBjB,EAAcd,EAChCgC,EAAmBD,EAAkB/B,EACrCiC,EAAcjD,EAAMkD,MAAMF,EAAkBD,GAKlD,OACE,sBAAK7C,UAAU,iBAAf,UACE,oBAAIA,UAAU,oBAAd,0BACA,cAAC,EAAD,CAAOF,MAAOiD,EAAahD,QAASA,IACpC,cAAC,EAAD,CAAYe,aAAcA,EAAcC,WAAYjB,EAAM0C,OAAQxB,SANrD,SAAAiC,GAAU,OAAIpB,EAAeoB,MAO1C,0CAAanB,EAAb,gBAAkCC,UCpEzBmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6874efb8.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery'\r\n//import {jQuery as $} from './jquery';\r\n\r\nconst Posts = ({ posts, loading }) => {\r\n  if (loading) {\r\n    return <h2>Loading ...</h2>;\r\n  }\r\n\r\n  function handleToggle(name) {\r\n    alert('Llamada aún no implementada para modificación en BackEnd ... ['  + name + ']');\r\n  }\r\n\r\n  return <table className=\"table\">\r\n    <tbody>\r\n    {posts.map(post => (\r\n      <tr key={post.id}>\r\n        <td>{post.id}</td>\r\n        <td>{post.eventBody.symbol}</td>\r\n        <td>{post.labels}</td>\r\n        <td>{post.timestamp}</td>\r\n        <td>{post.status}</td>\r\n        <td>{post.checked}</td>\r\n        <td><button onClick={() => handleToggle(post.eventBody.symbol)}>\r\n          {post.checked == 'no visto' ? 'no visto' : 'visto'}\r\n        </button></td>\r\n      </tr>\r\n    ))}\r\n    </tbody>\r\n    </table>;\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for(let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map(number =>(\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"JavaScript:void(0)\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Pagination;\r\n","/*import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n        Prueba tecnica <code>Ceptinel</code>.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\nimport React, {useState, useEffect} from 'react';\r\nimport Posts from './componentes/Posts';\r\nimport Pagination from './componentes/Pagination';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10);\r\n  let vistos = 1;\r\n  let noVistos = 1;\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      // si se accede como : http://localhost:3000/\r\n      // const res = await axios.get('./ceptinel/data.json');\r\n\r\n      // si se accede como : http://localhost:3000/ceptinel/\r\n      var res = await axios.get('./data.json').then();\r\n      for(var i = 0; i < res.data.events.length; i++){\r\n        var registro = res.data.events[i];\r\n        console.log(registro.checked);\r\n        if (registro.checked == 'visto')\r\n          vistos++;\r\n        else\r\n          noVistos++;\r\n      }\r\n\r\n      console.log('vistos' + vistos);\r\n      console.log('noVistos' + noVistos);\r\n      setPosts(res.data.events);\r\n      setLoading(false);\r\n    }\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPost = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // Cambio de página\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className=\"text-primary mb-3\">Centinel App</h1>\r\n      <Posts posts={currentPost} loading={loading} />\r\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\r\n      <div>Vistos {vistos} | No vistos {noVistos}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}