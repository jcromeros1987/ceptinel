{"version":3,"sources":["componentes/Posts.js","componentes/Pagination.js","componentes/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","cambiar","className","map","post","index","id","eventBody","symbol","labels","timestamp","status","checked","onClick","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","href","SearchBox","searching","useState","name","type","onChange","e","console","log","target","value","URL","App","setPosts","setLoading","currentPage","setCurrentPage","search","setSearch","visto","useEffect","a","axios","get","then","res","data","events","fetchPosts","indexOfLastPost","indexOfFirstPost","searchPost","filter","toUpperCase","includes","currentPost","slice","vistos","length","noVistos","class","update","pageNumber","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7924859a.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery'\r\n//import {jQuery as $} from './jquery';\r\n\r\nconst Posts = ({ posts, loading, cambiar }) => {\r\n  if (loading) {\r\n    return <h2>Loading ...</h2>;\r\n  }\r\n\r\n  function handleToggle(id) {\r\n    cambiar(id);\r\n    // alert('Llamada aún no implementada para modificación en BackEnd ... [' + id  + ' ' + name + ']');\r\n  }\r\n\r\n  return <table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n      <th>Id</th>\r\n      <th>Symbol</th>\r\n      <th>Criticality</th>\r\n      <th>Timestamp</th>\r\n      <th>Status</th>\r\n      <th>Checked</th>\r\n      <th>Checked</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n    {posts.map((post, index) => (\r\n      <tr key={post.id}>\r\n        <td>{post.id}</td>\r\n        <td>{post.eventBody.symbol}</td>\r\n        <td>{post.labels}</td>\r\n        <td>{post.timestamp}</td>\r\n        <td>{post.status}</td>\r\n        <td>{post.checked}</td>\r\n        <td><button onClick={() => handleToggle(post.id)}>\r\n          {post.checked}\r\n        </button></td>\r\n      </tr>\r\n    ))}\r\n    </tbody>\r\n    </table>;\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for(let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map(number =>(\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"JavaScript:void(0)\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, {useState} from 'react';\r\n\r\nconst SearchBox = ({searching}) => {\r\n  const [search, setSearch] = useState('all');\r\n\r\n  const handleSearchInput = (e) => {\r\n      console.log(e.target.value);\r\n      searching(e.target.value);\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      Busqueda: <input name=\"search\" id=\"search\" type=\"text\" onChange={handleSearchInput} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","/*import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n        Prueba tecnica <code>Ceptinel</code>.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n*/\r\nimport React, {useState, useEffect} from 'react';\r\nimport Posts from './componentes/Posts';\r\nimport Pagination from './componentes/Pagination';\r\nimport SearchBox from './componentes/SearchBox';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nconst URL = \"./data.json\";\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [currentSearch, setCurrentSearch] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [visto, setVisto] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      // si se accede como : http://localhost:3000/\r\n      // const res = await axios.get('./ceptinel/data.json');\r\n\r\n      // si se accede como : http://localhost:3000/ceptinel/\r\n      var res = await axios.get(URL).then();\r\n\r\n      setPosts(res.data.events);\r\n      setLoading(false);\r\n    }\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  // const currentPost = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n  const searchPost = posts.filter((post) => {\r\n      console.log(search.toUpperCase() + \" \" + post.eventBody.symbol);\r\n      return post.eventBody.symbol.includes(search.toUpperCase()) || post.id == search || post.checked == search;\r\n  });\r\n\r\n  const currentPost = searchPost.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const vistos = posts.filter((post) => {\r\n    return post.checked==\"visto\"\r\n  }).length;\r\n\r\n  const noVistos = posts.filter((post) => {\r\n    return post.checked==\"no visto\"\r\n  }).length;\r\n\r\n\r\n  // Cambio de página\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  const searching = search => setSearch(search);\r\n\r\n  const cambiar = (visto) => {\r\n    // posts[visto].checked=posts[visto].checked == \"visto\" ? \"no visto\" : \"visto\";\r\n    axios.get(URL).then(res => {\r\n      const update = posts.filter((post) => {\r\n        console.log(visto + ':' + post.id)\r\n        if(post.id == visto)\r\n          post.checked=post.checked == \"visto\" ? \"no visto\" : \"visto\";\r\n        // return visto !== post.id\r\n        return true;\r\n      });\r\n      //update[visto].checked=update[visto].checked == \"visto\" ? \"no visto\" : \"visto\";\r\n      setPosts(update)\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-8\">\r\n          <h1 className=\"text-primary mb-3\">Ceptinel App</h1>\r\n        </div>\r\n        <div class=\"col-md-4\">\r\n          <SearchBox searching={searching} />\r\n        </div>\r\n      </div>\r\n      <Posts posts={currentPost} loading={loading} cambiar={cambiar} />\r\n      <Pagination postsPerPage={postsPerPage} totalPosts={searchPost.length} paginate={paginate} />\r\n      <div>Total: {posts.length } | Vistos: {vistos} | No vistos: {noVistos} | Filtrados: {currentPost.length} | Filtro: {search} | visto: {visto} </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}